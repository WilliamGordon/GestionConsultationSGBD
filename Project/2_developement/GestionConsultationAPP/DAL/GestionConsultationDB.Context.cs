//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GestionConsultationEntities : DbContext
    {
        public GestionConsultationEntities()
            : base("name=GestionConsultationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Consultation> Consultations { get; set; }
        public virtual DbSet<Local> Locals { get; set; }
        public virtual DbSet<MaisonMedicale> MaisonMedicales { get; set; }
        public virtual DbSet<Medecin> Medecins { get; set; }
        public virtual DbSet<MedecinSpecialite> MedecinSpecialites { get; set; }
        public virtual DbSet<MedecinSpecialiteMaisonMedicale> MedecinSpecialiteMaisonMedicales { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Presence> Presences { get; set; }
        public virtual DbSet<Specialite> Specialites { get; set; }
    
        public virtual int AddMaisonMedicale(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMaisonMedicale", nameParameter);
        }
    
        public virtual int AddMaisonMedicaleForMedecin(Nullable<int> medecinSpecialite_ID, Nullable<int> maisonMedicale_ID, Nullable<int> minimalDuration, Nullable<bool> isActif)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            var maisonMedicale_IDParameter = maisonMedicale_ID.HasValue ?
                new ObjectParameter("MaisonMedicale_ID", maisonMedicale_ID) :
                new ObjectParameter("MaisonMedicale_ID", typeof(int));
    
            var minimalDurationParameter = minimalDuration.HasValue ?
                new ObjectParameter("MinimalDuration", minimalDuration) :
                new ObjectParameter("MinimalDuration", typeof(int));
    
            var isActifParameter = isActif.HasValue ?
                new ObjectParameter("IsActif", isActif) :
                new ObjectParameter("IsActif", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMaisonMedicaleForMedecin", medecinSpecialite_IDParameter, maisonMedicale_IDParameter, minimalDurationParameter, isActifParameter);
        }
    
        public virtual ObjectResult<Medecin> AddMedecin(string firstname, string lastname)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medecin>("AddMedecin", firstnameParameter, lastnameParameter);
        }
    
        public virtual ObjectResult<Medecin> AddMedecin(string firstname, string lastname, MergeOption mergeOption)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medecin>("AddMedecin", mergeOption, firstnameParameter, lastnameParameter);
        }
    
        public virtual int AddPatient(string firstname, string lastname)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient", firstnameParameter, lastnameParameter);
        }
    
        public virtual int AddSpecialiteForMedecin(Nullable<int> specialite_ID, Nullable<int> medecin_ID)
        {
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSpecialiteForMedecin", specialite_IDParameter, medecin_IDParameter);
        }
    
        public virtual int DeleteSpecialiteForMedecin(Nullable<int> medecinSpecialite_ID)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialiteForMedecin", medecinSpecialite_IDParameter);
        }
    
        public virtual ObjectResult<GetAllMedecin_Result> GetAllMedecin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMedecin_Result>("GetAllMedecin");
        }
    
        public virtual ObjectResult<GetAllSpecialite_Result> GetAllSpecialite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSpecialite_Result>("GetAllSpecialite");
        }
    
        public virtual ObjectResult<GetAllSpecialiteForMedecin_Result> GetAllSpecialiteForMedecin(Nullable<int> medecin_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSpecialiteForMedecin_Result>("GetAllSpecialiteForMedecin", medecin_IDParameter);
        }
    
        public virtual int UpdateMinimalDurationOfConsultation(Nullable<int> medecinSpecialiteMaisonMedicale_ID, Nullable<int> minimalDuration)
        {
            var medecinSpecialiteMaisonMedicale_IDParameter = medecinSpecialiteMaisonMedicale_ID.HasValue ?
                new ObjectParameter("MedecinSpecialiteMaisonMedicale_ID", medecinSpecialiteMaisonMedicale_ID) :
                new ObjectParameter("MedecinSpecialiteMaisonMedicale_ID", typeof(int));
    
            var minimalDurationParameter = minimalDuration.HasValue ?
                new ObjectParameter("MinimalDuration", minimalDuration) :
                new ObjectParameter("MinimalDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMinimalDurationOfConsultation", medecinSpecialiteMaisonMedicale_IDParameter, minimalDurationParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AddSpecialite(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddSpecialite", nameParameter);
        }
    
        public virtual int DeleteMaisonMedicale(Nullable<int> maisonMedicale_ID)
        {
            var maisonMedicale_IDParameter = maisonMedicale_ID.HasValue ?
                new ObjectParameter("MaisonMedicale_ID", maisonMedicale_ID) :
                new ObjectParameter("MaisonMedicale_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMaisonMedicale", maisonMedicale_IDParameter);
        }
    
        public virtual int DeleteMedecin(Nullable<int> medecin_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedecin", medecin_IDParameter);
        }
    
        public virtual int DeletePatient(Nullable<int> patient_ID)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", patient_IDParameter);
        }
    
        public virtual int DeleteSpecialite(Nullable<int> specialite_ID)
        {
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialite", specialite_IDParameter);
        }
    
        public virtual int UpdateMaisonMedicale(Nullable<int> maisonMedicale_ID, string name)
        {
            var maisonMedicale_IDParameter = maisonMedicale_ID.HasValue ?
                new ObjectParameter("MaisonMedicale_ID", maisonMedicale_ID) :
                new ObjectParameter("MaisonMedicale_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMaisonMedicale", maisonMedicale_IDParameter, nameParameter);
        }
    
        public virtual int UpdateMedecin(Nullable<int> medecin_ID, string firstname, string lastname)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedecin", medecin_IDParameter, firstnameParameter, lastnameParameter);
        }
    
        public virtual int UpdatePatient(Nullable<int> patient_ID, string firstname, string lastname)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", patient_IDParameter, firstnameParameter, lastnameParameter);
        }
    
        public virtual int UpdateSpecialite(Nullable<int> specialite_ID, string name)
        {
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpecialite", specialite_IDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Medecin> GetMedecinById(Nullable<int> medecin_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medecin>("GetMedecinById", medecin_IDParameter);
        }
    
        public virtual ObjectResult<Medecin> GetMedecinById(Nullable<int> medecin_ID, MergeOption mergeOption)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medecin>("GetMedecinById", mergeOption, medecin_IDParameter);
        }
    
        public virtual ObjectResult<Patient> GetPatientById(Nullable<int> patient_ID)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patient>("GetPatientById", patient_IDParameter);
        }
    
        public virtual ObjectResult<Patient> GetPatientById(Nullable<int> patient_ID, MergeOption mergeOption)
        {
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patient>("GetPatientById", mergeOption, patient_IDParameter);
        }
    
        public virtual ObjectResult<Specialite> GetSpecialiteById(Nullable<int> specialite_ID)
        {
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Specialite>("GetSpecialiteById", specialite_IDParameter);
        }
    
        public virtual ObjectResult<Specialite> GetSpecialiteById(Nullable<int> specialite_ID, MergeOption mergeOption)
        {
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Specialite>("GetSpecialiteById", mergeOption, specialite_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddMedecinSpecialite(Nullable<int> medecin_ID, Nullable<int> specialite_ID)
        {
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddMedecinSpecialite", medecin_IDParameter, specialite_IDParameter);
        }
    
        public virtual int DeleteMedecinSpecialite(Nullable<int> medecinSpecialite_ID)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedecinSpecialite", medecinSpecialite_IDParameter);
        }
    
        public virtual ObjectResult<MedecinSpecialite> GetMedecinSpecialiteById(Nullable<int> medecinSpecialite_ID)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MedecinSpecialite>("GetMedecinSpecialiteById", medecinSpecialite_IDParameter);
        }
    
        public virtual ObjectResult<MedecinSpecialite> GetMedecinSpecialiteById(Nullable<int> medecinSpecialite_ID, MergeOption mergeOption)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MedecinSpecialite>("GetMedecinSpecialiteById", mergeOption, medecinSpecialite_IDParameter);
        }
    
        public virtual int UpdateMedecinSpecialite(Nullable<int> medecinSpecialite_ID, Nullable<int> medecin_ID, Nullable<int> specialite_ID)
        {
            var medecinSpecialite_IDParameter = medecinSpecialite_ID.HasValue ?
                new ObjectParameter("MedecinSpecialite_ID", medecinSpecialite_ID) :
                new ObjectParameter("MedecinSpecialite_ID", typeof(int));
    
            var medecin_IDParameter = medecin_ID.HasValue ?
                new ObjectParameter("Medecin_ID", medecin_ID) :
                new ObjectParameter("Medecin_ID", typeof(int));
    
            var specialite_IDParameter = specialite_ID.HasValue ?
                new ObjectParameter("Specialite_ID", specialite_ID) :
                new ObjectParameter("Specialite_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedecinSpecialite", medecinSpecialite_IDParameter, medecin_IDParameter, specialite_IDParameter);
        }
    }
}
